#pragma once

#include <functional>
#include <optional>
#include <typeindex>

#include <bungeegum/core/draw.hpp>
#include <bungeegum/core/interact.hpp>
#include <bungeegum/core/resolve.hpp>
#include <bungeegum/glue/detection.hpp>
#include <bungeegum/glue/raw.hpp>
#include <bungeegum/glue/registry.hpp>
#include <bungeegum/glue/reload.hpp>


namespace bungeegum {

struct runtime_widget;

namespace detail {

    namespace traits {

        template <typename widget_t>
        using detected_resolve_function = decltype(std::declval<widget_t>().resolve(std::declval<resolve_command&>()));

        template <typename widget_t>
        constexpr static bool has_resolve_function_v = is_detected_exact_v<void, detected_resolve_function, widget_t>;

        template <typename widget_t>
        using detected_interact_function = decltype(std::declval<widget_t>().interact(std::declval<interact_command&>()));

        template <typename widget_t>
        constexpr static bool has_interact_function_v = is_detected_exact_v<void, detected_interact_function, widget_t>;

        template <typename widget_t>
        using detected_draw_function = decltype(std::declval<widget_t>().draw(std::declval<draw_command&>()));

        template <typename widget_t>
        constexpr static bool has_draw_function_v = is_detected_exact_v<void, detected_draw_function, widget_t>;

    }

    struct untyped_widget_data {
        std::uintptr_t raw_widget = 0u;
        std::unique_ptr<std::type_index> kind = nullptr;
        std::string kind_debug = ""; // to show type in debugger TODO REMOVE
        std::optional<std::reference_wrapper<untyped_widget_data>> parent = std::nullopt;
        std::vector<std::reference_wrapper<untyped_widget_data>> children = {};
        resolve_command resolver_command;
        std::function<void(resolve_command&)> resolver = nullptr;
        std::optional<interact_command> interactor_command = std::nullopt;
        std::function<void(interact_command&)> interactor = nullptr;
        std::optional<draw_command> drawer_command = std::nullopt;
        std::function<void(draw_command&)> drawer = nullptr;

#if BUNGEEGUM_USE_HOTRELOAD
        std::function<void(reloaded_loader&)> loader = nullptr;
        std::function<void(reloaded_saver&)> saver = nullptr;
#endif

        bool operator==(const untyped_widget_data& other);
    };

    struct widgets_manager {
        registry<registry_entity> widgets = {};
        std::unordered_map<std::uintptr_t, registry_entity> possessed = {};
        std::unordered_map<std::uintptr_t, std::reference_wrapper<untyped_widget_data>> registered = {};
        std::optional<std::reference_wrapper<untyped_widget_data>> root = std::nullopt;
        std::vector<std::reference_wrapper<untyped_widget_data>> resolvables = {};
        std::vector<std::reference_wrapper<untyped_widget_data>> interactables = {};
        std::vector<std::reference_wrapper<untyped_widget_data>> drawables = {};

        // template <typename widget_t>
        // reference_widget<widget_t> get_reference_widget(detail::reloaded<widget_t>&& reloaded)

        runtime_widget get_runtime_widget(untyped_widget_data& widget_data);

        untyped_widget_data& get_widget_data(const runtime_widget& widget);

        // only use by context go context maybe
        void traverse_untyped(untyped_widget_data& iterate_root, const std::function<bool(untyped_widget_data&)>& iterate_callback);

        void save_widgets(const std::filesystem::path& archive_path);

        void load_widgets(const std::filesystem::path& archive_path);
    };

    inline widgets_manager global_widgets_manager;
}
}
