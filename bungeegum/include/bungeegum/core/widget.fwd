#pragma once

#include <functional>
#include <optional>
#include <typeindex>

#include <bungeegum/context/draw.hpp>
#include <bungeegum/context/interact.hpp>
#include <bungeegum/context/resolve.hpp>
#include <bungeegum/glue/raw.fwd>
#include <bungeegum/glue/registry.fwd>
#include <bungeegum/glue/reload.fwd>

namespace bungeegum {

struct runtime_widget;

namespace detail {

    struct untyped_widget_data {
        std::uintptr_t raw_widget = 0u;
        std::unique_ptr<std::type_index> kind = nullptr;
        std::string kind_debug = "";
        std::optional<std::reference_wrapper<untyped_widget_data>> parent = std::nullopt;
        std::vector<std::reference_wrapper<untyped_widget_data>> children = {};
        std::function<void(interact_command&)> interactor = nullptr;
        std::function<void(resolve_command&)> resolver = nullptr;
        std::function<void(draw_command&)> drawer = nullptr;
        std::optional<interact_command> interactor_command = std::nullopt;
        std::optional<resolve_command> resolver_command = std::nullopt;
        std::optional<draw_command> drawer_command = std::nullopt;

        inline bool operator==(const untyped_widget_data& other)
        {
            return raw_widget == other.raw_widget;
        }
    };

    struct runtime_widget_data {
        std::optional<std::reference_wrapper<untyped_widget_data>> untyped_widget = std::nullopt;
    };

    struct widgets_registry {
        registry widgets = {};
        std::unordered_map<std::uintptr_t, entity_t> possessed = {};
        std::unordered_map<std::uintptr_t, std::reference_wrapper<untyped_widget_data>> registered = {};
        std::optional<std::reference_wrapper<untyped_widget_data>> root = std::nullopt;
        std::vector<std::reference_wrapper<untyped_widget_data>> resolvables = {};
        std::vector<std::reference_wrapper<untyped_widget_data>> drawables = {};

        runtime_widget get_runtime_widget(untyped_widget_data& widget_data);

        untyped_widget_data& get_widget_data(const runtime_widget& widget);

        void traverse_untyped(untyped_widget_data& iterate_root, const std::function<bool(untyped_widget_data&)>& iterate_callback);
    };

    inline widgets_registry widgets_context;

    inline widgets_registry& get_widgets_context()
    {
        // static if
    }
}
}
