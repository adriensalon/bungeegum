#pragma once

#include <functional>
#include <future>
#include <optional>
#include <typeindex>

#include <bungeegum/glue/map.hpp>
#include <bungeegum/glue/raw.hpp>
#include <bungeegum/glue/registry.hpp>
#include <bungeegum/glue/typelist.hpp>

namespace bungeegum {

template <typename... values_t>
struct event;

namespace detail {

    template <typename... values_t>
    struct event_data {
        event_data() = default;
        event_data(const event_data& other);
        event_data& operator=(const event_data& other);
        event_data(event_data&& other) = default;
        event_data& operator=(event_data&& other) = default;
        ~event_data();

        std::uintptr_t raw_event = 0;
        std::vector<std::function<void(values_t...)>> callbacks = {};
        std::vector<std::future<future_typelist_t<values_t...>>> futures = {};
        std::vector<std::shared_future<future_typelist_t<values_t...>>> shared_futures = {};
    };

    struct event_update_data {
        std::vector<std::type_index> kinds = {};
        std::function<void()> ticker = nullptr;
    };

    struct events_container {
        //
        //
        registry events = {};
        std::unordered_map<std::uintptr_t, registry_entity> possessed = {};
        std::unordered_map<std::uintptr_t, std::reference_wrapper<event_update_data>> registered = {};
        //
        //

        indexed_map<std::uintptr_t, std::reference_wrapper<event_update_data>> tickables = {};

        template <typename... values_t>
        event_data<values_t...>& get_data(event<values_t...>& event_object);
    };

    inline events_container global_events_container;
}
}
