#pragma once

#include <functional>
#include <future>
#include <typeindex>

#include <bungeegum/glue/map.hpp>
#include <bungeegum/glue/typelist.hpp>

namespace bungeegum {

namespace detail {

    template <typename... values_t>
    struct event_data {
        event_data() = default;
        event_data(const event_data& other);
        event_data& operator=(const event_data& other);
        event_data(event_data&& other) = default;
        event_data& operator=(event_data&& other) = default;
        ~event_data();

        std::uintptr_t raw_event = 0;
        std::vector<std::function<void(values_t...)>> callbacks = {};
        std::vector<std::future<future_typelist_t<values_t...>>> futures = {};
        std::vector<std::shared_future<future_typelist_t<values_t...>>> shared_futures = {};
    };

    struct event_update_data {
        std::vector<std::type_index> kinds = {};
        std::function<void()> ticker = nullptr;
    };

    struct event_container_data {
        void notify_erase(const std::uintptr_t& raw_event);
        void tick();

        indexed_map<std::uintptr_t, event_update_data> tickables = {};

    private:
        std::vector<std::uintptr_t> _tickables_to_erase = {};
    };

    inline event_container_data global_event_container;
}
}
