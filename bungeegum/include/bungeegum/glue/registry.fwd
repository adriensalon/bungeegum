#pragma once

#include <optional>
#include <vector>

#include <entt/entt.hpp>

#include <bungeegum/glue/typelist.fwd>

namespace bungeegum {
namespace detail {

    using entity_t = ENTT_ID_TYPE;

    struct registry {
        registry();
        registry(const registry& other) = delete;
        registry& operator=(const registry& other) = delete;
        registry(registry&& other);
        registry& operator=(registry&& other);

        entity_t create_entity();

        void destroy_entity(const entity_t entity);

        template <typename component_t>
        std::optional<entity_t> try_get_entity(component_t& component);

        template <typename component_t>
        entity_t get_entity(component_t& component);

        template <typename component_t>
        [[nodiscard]] bool has_component(const entity_t entity) const;

        template <typename component_t, typename... args_t>
        decltype(auto) create_component(const entity_t entity, args_t&&... args);

        template <typename component_t>
        component_t& get_component(const entity_t entity);

        template <typename component_t>
        const component_t& get_component(const entity_t entity) const;

        template <typename... components_t> // exclude filter
        void iterate(const std::function<void(components_t&...)>& iterate_function);

        template <typename... components_t> // exclude filter
        void iterate_with_entities(const std::function<void(entity_t, components_t&...)>& iterate_function);

    private:
        entt::basic_registry<entity_t> _registry;
    };

}
}

#include <bungeegum/glue/registry.inl>