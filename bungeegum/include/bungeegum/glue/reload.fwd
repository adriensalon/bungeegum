#pragma once

#include <filesystem>

#define HSCPP_CXX_STANDARD 17

#include <hscpp/mem/Ref.h>
#include <hscpp/module/Tracker.h>

#include <bungeegum/glue/archive.fwd>
#include <bungeegum/glue/foreach.fwd>
#include <bungeegum/glue/simd.hpp>

//
//
#define BUNGEEGUM_ENBALE_HOTRELOAD 1
//
//

namespace hscpp {
class Hotswapper;
namespace mem {
    class MemoryManager;
}
}

namespace bungeegum {
namespace detail {

#if !defined(BUNGEEGUM_ENBALE_HOTRELOAD)
#define BUNGEEGUM_ENBALE_HOTRELOAD 0
#endif

#if BUNGEEGUM_ENBALE_HOTRELOAD

#define HOTRELOAD_CLASS(class, name) HSCPP_TRACK(class, name)
#define HOTRELOAD_METHOD hscpp_virtual
#define HOTRELOAD_FIELDS(...)                                                                                       \
    template <typename value_t>                                                                                     \
    friend struct bungeegum::detail::wrapper;                                                                       \
    friend struct bungeegum::detail::input_archiver;                                                                \
    friend struct bungeegum::detail::output_archiver;                                                               \
    friend class cereal::access;                                                                                    \
    template <typename... fields_t>                                                                                 \
    void _bungeegum_save_fields(cereal::JSONOutputArchive& archive, const std::string& names, fields_t&&... fields) \
    {                                                                                                               \
        std::vector<std::string> _names;                                                                            \
        std::stringstream _sstream(names);                                                                          \
        while (_sstream.good()) {                                                                                   \
            std::string _substr;                                                                                    \
            std::getline(_sstream, _substr, ',');                                                                   \
            if (_substr[0] == ' ') {                                                                                \
                _substr = _substr.substr(1, _substr.length() - 1);                                                  \
            }                                                                                                       \
            _names.push_back(_substr);                                                                              \
        }                                                                                                           \
        std::tuple<fields_t&...> _tuple((fields)...);                                                               \
        constexpr size_t _count = std::variant_size_v<std::variant<fields_t...>>;                                   \
        bungeegum::detail::constexpr_for<0, _count, 1>([&](auto _index) {                                           \
            using field_type_t = std::variant_alternative_t<_index, std::variant<fields_t...>>;                     \
            field_type_t& _field = std::get<_index>(_tuple);                                                        \
            archive(cereal::make_nvp(_names[_index].c_str(), _field));                                              \
        });                                                                                                         \
    }                                                                                                               \
    hscpp_virtual void _bungeegum_save(cereal::JSONOutputArchive& archive)                                          \
    {                                                                                                               \
        _bungeegum_save_fields(archive, { #__VA_ARGS__ }, __VA_ARGS__);                                             \
    }

    // #define HOTRELOAD_FIELDS2(...)
    //     friend class cereal::access;
    // 	template <typename widget_t>
    //     struct bungeegum_serializer {
    //         template <typename archive_t>
    //         void serialize(archive_t& archive)
    //         {
    //             archive(__VA_ARGS__);
    //         }
    //     };
    //     bungeegum_serializer _serializer;
    //     hscpp_virtual _bungeegum_save(cereal::JSONOutputArchive& archive)
    //     {
    //         archive(_serializer);
    //     }

    template <typename widget_t>
    struct reloaded {
        reloaded() = delete;
        reloaded(const reloaded& other);
        reloaded& operator=(const reloaded& other);
        reloaded(reloaded&& other);
        reloaded& operator=(reloaded&& other);

        widget_t& get();
        const widget_t& get() const;

    private:
        hscpp::mem::UniqueRef<widget_t> _ref;
        reloaded(hscpp::mem::UniqueRef<widget_t>&& ref);
        friend struct reloader;
    };

    enum struct reload_result {
        idle,
        compiling,
        started_compiling,
        performed_swap,
        failed_swap,
    };

    struct reloader {
        reloader();
        reloader(const reloader& other) = delete;
        reloader& operator=(const reloader& other) = delete;
        reloader(reloader&& other) = default;
        reloader& operator=(reloader&& other) = default;

        template <typename widget_t>
        reloaded<widget_t> allocate();

        uint1 allocated_blocks_count();
        void add_include_directory(const std::filesystem::path& directory);
        void add_library(const std::filesystem::path& file);
        void add_source_directory(const std::filesystem::path& directory);
        void add_force_compiled_source_file(const std::filesystem::path& file);
        void clear();
        void force_update();
        reload_result update();

    private:
        std::shared_ptr<hscpp::Hotswapper> _swapper = nullptr;
        std::shared_ptr<hscpp::mem::UniqueRef<hscpp::mem::MemoryManager>> _manager = nullptr;
    };

#else

    template <typename widget_t>
    using reloaded = widget_t&;

#endif
}
}

#include <bungeegum/glue/reload.inl>