#pragma once

#include <cstddef>
#include <functional>
#include <memory>
#include <optional>
#include <string>

#include <bungeegum/core/math.hpp>
#include <bungeegum/glue/toolchain.fwd>

#if !TOOLCHAIN_PLATFORM_EMSCRIPTEN
struct SDL_Window;
union SDL_Event;
#endif

namespace bungeegum {
namespace detail {

    /// @brief Instances of this struct represent cross-platform window resized event data.
    struct window_resized_event {
        bool is_fullscreen;
        float2 new_size;
    };

    /// @brief Instances of this struct represent cross-platform mouse moved event data.
    struct mouse_moved_event {
        float2 absolute_position;
        float2 relative_position;
    };

    /// @brief Instances of this struct represent cross-platform mouse down event data.
    struct mouse_down_event {
        unsigned int button_index;
    };

    /// @brief Instances of this struct represent cross-platform mouse up event data.
    struct mouse_up_event {
        unsigned int button_index;
    };

    /// @brief Instances of this struct represent cross-platform mouse pressed event data.
    struct mouse_pressed_event {
        unsigned int button_index;
    };

    /// @brief Instances of this struct represent cross-platform OS windows that can be modified
    /// at runtime, collect OS events such as input, and swap buffers after rendering has finished.
    /// @details Instances of this struct can only be moved.
    struct window {
        window() = default;
        window(const window& other) = delete;
        window& operator=(const window& other) = delete;
        window(window&& other) = default; // WARNING moving the window will invalidate __this ptr if captured in a callback
        window& operator=(window&& other) = default; // WARNING moving the window will invalidate __this ptr if captured in a callback
        ~window();

#if !TOOLCHAIN_PLATFORM_EMSCRIPTEN
        /// @brief Creates a new window from an existing native window on native platforms.
        /// @param hwnd Raw ptr to an existing native window.
        /// @return Returns the new window.
        void attach_native(void* native_window);

        /// @brief Creates a new window from an existing SDL window.
        /// @param sdl_window Raw ptr to an existing SDL window.
        /// @return Returns the new window.
        void attach_sdl(SDL_Window* sdl_window);
#endif

#if TOOLCHAIN_PLATFORM_EMSCRIPTEN
        /// @brief Creates a new window from the existing window on the web platform.
        /// @return Returns the new window.
        void attach_emscripten();
#endif

        /// @brief Creates a new window on the target platform.
        /// @exception Throws a runtime exception if the platform is Emscripten, Android or iOS and
        /// another window has already been created.
        /// @return Returns the new window.
        void create();

        /// @brief Sets globally if the cursor is shown for all windows.
        /// @param Whether the cursor must be shown.
        static void cursor(const bool show);

        /// @brief Sets the fullscreen mode of this instance.
        /// @param enabled Whether fullscreen mode must be enabled.
        void fullscreen(const bool enabled);

#if !TOOLCHAIN_PLATFORM_EMSCRIPTEN
        /// @brief Gets an opaque pointer to the OS window struct.
        /// @exception Throws a compile-time exception if the platform is web.
        [[nodiscard]] void* get_native() const;

        /// @brief Gets a raw pointer to the underlying SDL_Window.
        /// @exception Throws a compile-time exception if the platform is web.
        [[nodiscard]] SDL_Window* get_sdl() const;
#endif

        /// @brief Gets the current size of this instance.
        [[nodiscard]] float2 get_size() const;

        /// @brief Sets a callback to be trigged before the window will be destroyed (if created)
        /// or released (if attached).
        void on_exit(const std::function<void()>& exit_callback);

        /// @brief Sets a callback to be triggered each time a mouse down event is received.
        /// @details Event callbacks are fired after poll() has been invoked.
        void on_mouse_down(const std::function<void(const mouse_down_event&)>& mouse_down_callback);

        /// @brief Sets a callback to be triggered each time a mouse moved event is received.
        /// @details Event callbacks are fired after poll() has been invoked.
        void on_mouse_moved(const std::function<void(const mouse_moved_event&)>& mouse_moved_callback);

        /// @brief Sets a callback to be triggered each time a mouse pressed event is received.
        /// @details Event callbacks are fired after poll() has been invoked.
        void on_mouse_pressed(const std::function<void(const mouse_pressed_event&)>& mouse_pressed_callback);

        /// @brief Sets a callback to be triggered each time a mouse up event is received.
        /// @details Event callbacks are fired after poll() has been invoked.
        void on_mouse_up(const std::function<void(const mouse_up_event&)>& mouse_up_callback);

        /// @brief Sets a callback to be triggered each time a window resized event is received.
        /// @details Event callbacks are fired after poll() has been invoked.
        void on_resized(const std::function<void(const window_resized_event&)>& window_resized_callback);

#if !TOOLCHAIN_PLATFORM_EMSCRIPTEN
        /// @brief Sets a callback to be triggered each time a SDL_Event is received.
        /// @details Event callbacks are fired after poll() has been invoked.
        void on_sdl_event(const std::function<void(const SDL_Event*)>& sdl_event_callback);
#endif

        /// @brief Sets a callback to be triggered each time
        /// @details Event callbacks are fired when update() or update_loop() is called.
        void on_update(const std::function<void()>& update_callback);

        /// @brief Collects all the events fired since the last call to poll() and triggers
        /// appropriate callbacks.
        bool poll(const bool poll_simulated = true, const bool poll_device = true);

        /// @brief Sets a new size for this instance.
        /// @details This has no effect on Android, iOS and Emscripten platforms.
        /// @param new_size The new size in pixels.
        void resize(const float2 new_size);

        /// @brief Simulates a mouse down event, without modifying device state.
        /// @param button_index The simulated mouse button.
        void simulate_mouse_down(const unsigned int button_index);

        /// @brief Simulates a mouse moved event, without modifying device state.
        /// @param button_index The absolute mouse position.
        void simulate_mouse_move(const float2 absolute_position);

        /// @brief Simulates a mouse moved event with a relative position, without modifying device
        /// state.
        /// @param button_index The relative mouse position.
        void simulate_mouse_move_relative(const float2 relative_position);

        /// @brief Simulates a mouse pressed event, without modifying device state.
        /// @param button_index The simulated mouse button.
        void simulate_mouse_pressed(const unsigned int button_index);

        /// @brief Simulates a mouse up event, without modifying device state.
        /// @param button_index The simulated mouse button.
        void simulate_mouse_up(const unsigned int button_index);

        /// @brief Sets the title of this instance.
        void title(const std::string& description);

        /// @brief Sets the title of this instance.
        void update_once();

        /// @brief Sets the title of this instance.
        void update_loop(const std::optional<unsigned int> max_framerate = std::nullopt);

    private:
        struct window_data;

        template <typename event_t>
        struct event_container {
            std::vector<event_t> simulated = {};
            std::vector<event_t> stashed = {};
            std::vector<std::function<void(const event_t&)>> callbacks = {};
        };

        bool _is_running = false;
        std::shared_ptr<window_data> _data = nullptr;
        std::vector<std::function<void()>> _exit_callbacks = {};
        std::vector<std::function<void()>> _update_callbacks = {};
        event_container<mouse_down_event> _mouse_down_events = {};
        event_container<mouse_moved_event> _mouse_moved_events = {};
        event_container<mouse_up_event> _mouse_up_events = {};
        event_container<mouse_pressed_event> _mouse_pressed_events = {};
        event_container<window_resized_event> _resized_events = {};
#if !TOOLCHAIN_PLATFORM_EMSCRIPTEN
        std::vector<std::function<void(const SDL_Event*)>> _sdl_event_callbacks = {};
#endif
    };

}
}
