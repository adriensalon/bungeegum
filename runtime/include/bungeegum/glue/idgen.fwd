#pragma once

#include <atomic>
#include <queue>

namespace bungeegum {
namespace detail {

    /// @brief
    /// @tparam id_t
    /// @tparam instance_t
    template <typename instance_t, typename id_t = std::uintptr_t>
    struct id_generator {
        id_generator() = default;
        id_generator(const id_generator& other) = default;
        id_generator& operator=(const id_generator& other) = default;
        id_generator(id_generator&& other) = default;
        id_generator& operator=(id_generator&& other) = default;

        /// @brief
        /// @return
        [[nodiscard]] id_t generate();

        /// @brief
        /// @param id
        void recycle(const id_t id);

    private:
        id_t _limit = static_cast<id_t>(0);
        std::queue<id_t> _to_recycle = {};
    };

    /// @brief
    /// @tparam instance_t
    /// @tparam id_t
    template <typename instance_t, typename id_t = std::uintptr_t>
    struct id_generator_concurrent {
        id_generator_concurrent() = default;
        id_generator_concurrent(const id_generator_concurrent& other) = default;
        id_generator_concurrent& operator=(const id_generator_concurrent& other) = default;
        id_generator_concurrent(id_generator_concurrent&& other) = default;
        id_generator_concurrent& operator=(id_generator_concurrent&& other) = default;

        /// @brief
        /// @return
        [[nodiscard]] id_t generate();

        /// @brief
        /// @param id
        void recycle(const id_t id);

    private:
        std::atomic<id_t> _limit = static_cast<id_t>(0);
        std::queue<id_t> _to_recycle = {}; // replace par concurrent queue
    };

}
}

#include <bungeegum/glue/idgen.inl>