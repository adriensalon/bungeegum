#pragma once

#include <filesystem>
#include <memory>
#include <string>

#include <bungeegum/glue/rendering.hpp>

namespace bungeegum {

struct font;

namespace detail {

    struct font_data {
        font_data();
        font_data(const font_data& other);
        font_data& operator=(const font_data& other);
        font_data(font_data&& other);
        font_data& operator=(font_data&& other);
        ~font_data();
        
        std::uintptr_t raw = 0u;
        std::unordered_map<std::uintptr_t, font_handle> fonts = {};
        bool is_compiled = false;
        void* creation_ttf = nullptr;
        std::size_t creation_count = 0u;
        float creation_size = 0.f;
    };

    struct fonts_manager_data {
        fonts_manager_data() = default;
        fonts_manager_data(const fonts_manager_data& other) = delete;
        fonts_manager_data& operator=(const fonts_manager_data& other) = delete;
        fonts_manager_data(fonts_manager_data&& other) = delete;
        fonts_manager_data& operator=(fonts_manager_data&& other) = delete;

        std::unordered_map<std::uintptr_t, std::reference_wrapper<font_data>> fonts = {};
    };

    struct font_access {
        [[nodiscard]] static const font_data& get_data(const font& object);
    };

}
}