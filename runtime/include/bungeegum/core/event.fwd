#pragma once

#include <functional>
#include <future>
#include <optional>
#include <typeindex>
#include <unordered_map>
#include <vector>

#include <bungeegum/config/feature.hpp>
#include <bungeegum/glue/foreach.hpp>

namespace bungeegum {
namespace detail {

    struct event_update_data {
        std::vector<std::type_index> kinds = {};
        std::function<void()> ticker = nullptr;
#if BUNGEEGUM_USE_OVERLAY
        std::vector<std::string> clean_typenames = {};
#endif
    };

    template <typename... values_t>
    struct event_data {
        event_data();
        event_data(const event_data& other); // deep copy
        event_data& operator=(const event_data& other); // deep copy
        event_data(event_data&& other); // move garde raw update ref
        event_data& operator=(event_data&& other); // move garde raw update ref
        ~event_data(); // notify erase if being updated

        std::uintptr_t raw = {};
        std::vector<std::function<void(values_t...)>> callbacks = {};
        std::vector<std::future<variadic_reduce_t<values_t...>>> futures = {};
        std::vector<std::shared_future<variadic_reduce_t<values_t...>>> shared_futures = {};
        event_update_data update_data = {};
    }; 

    struct events_manager {
        events_manager() = default;
        events_manager(const events_manager& other) = delete;
        events_manager& operator=(const events_manager& other) = delete;
        events_manager(events_manager&& other) = delete;
        events_manager& operator=(events_manager&& other) = delete;

        std::unordered_map<std::uintptr_t, std::reference_wrapper<event_update_data>> updatables = {};
        std::vector<std::uintptr_t> updatables_to_erase = {};
    };
}
}
