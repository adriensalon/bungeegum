#pragma once

#include <string>
#include <unordered_map>
#include <unordered_set>

#include <bungeegum/glue/rendering.hpp>

namespace bungeegum {

struct shader;

namespace detail {

    struct shader_data {
        shader_data();
        shader_data(const shader_data& other);
        shader_data& operator=(const shader_data& other);
        shader_data(shader_data&& other);
        shader_data& operator=(shader_data&& other);
        ~shader_data();

        std::uintptr_t raw = 0u;
        std::unordered_map<std::uintptr_t, shader_handle> shaders = {};
        bool is_compiled = false;
        std::string creation_fragment = {};
        shader_blend_descriptor creation_blend = {};
    };

    struct shaders_manager_data {
        shaders_manager_data() = default;
        shaders_manager_data(const shaders_manager_data& other) = delete;
        shaders_manager_data& operator=(const shaders_manager_data& other) = delete;
        shaders_manager_data(shaders_manager_data&& other) = delete;
        shaders_manager_data& operator=(shaders_manager_data&& other) = delete;

        std::unordered_map<std::uintptr_t, std::reference_wrapper<shader_data>> shaders = {};
    };

    struct shader_access {
        [[nodiscard]] static const shader_data& get_data(const shader& object);
    };

}
}