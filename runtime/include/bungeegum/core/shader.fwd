#pragma once

#include <string>
#include <unordered_map>

#include <bungeegum/glue/rendering.hpp>

namespace bungeegum {

struct shader_resource;
struct shader;

namespace detail {

    struct shader_blend_options_data {
        shader_blend_descriptor options = {};
    };

    struct shader_resource_data {
        std::string fragment = {};
        shader_blend_descriptor blend = {};
    };

    struct shader_data {
        shader_data() = default;
        shader_data(const shader_data& other) = default; // NOOOO deep copy
        shader_data& operator=(const shader_data& other) = default; // NOOOO deep copy
        shader_data(shader_data&& other) = default;
        shader_data& operator=(shader_data&& other) = default;

        std::unordered_map<std::uintptr_t, shader_handle> shaders = {};
    };

    struct shader_depth_options_access {
    };

    struct shader_stencil_options_access {
    };

    struct shader_resource_access {
        [[nodiscard]] static shader_resource make_from_data(const shader_resource_data& data);
        [[nodiscard]] static shader_resource_data& get_data(shader_resource& object);
        [[nodiscard]] static const shader_resource_data& get_data(const shader_resource& object);
    };

    struct shader_access {
        [[nodiscard]] static shader make_from_data(const shader_data& data);
        [[nodiscard]] static shader_data& get_data(shader& object);
        [[nodiscard]] static const shader_data& get_data(const shader& object);
    };

}
}