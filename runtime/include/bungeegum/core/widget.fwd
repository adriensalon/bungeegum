#pragma once

#include <any>
#include <functional>
#include <optional>
#include <typeindex>

#include <bungeegum/core/draw.hpp>
#include <bungeegum/core/interact.hpp>
#include <bungeegum/core/overlay.fwd>
#include <bungeegum/core/resolve.hpp>
#include <bungeegum/glue/detection.fwd>
#include <bungeegum/glue/raw.fwd>
#include <bungeegum/glue/registry.fwd>
#include <bungeegum/glue/reload.fwd>

namespace bungeegum {

struct widget_id;

template <typename widget_t>
struct widget_ref;

namespace detail {
    namespace traits {

        template <typename widget_t>
        using detected_draw_function = decltype(std::declval<widget_t>().draw(std::declval<draw_command&>()));

        template <typename widget_t>
        using detected_interact_function = decltype(std::declval<widget_t>().interact(std::declval<interact_command&>()));

        template <typename widget_t>
        using detected_resolve_function = decltype(std::declval<widget_t>().resolve(std::declval<resolve_command&>()));

        template <typename widget_t>
        constexpr static bool has_draw_function_v = is_detected_exact_v<void, detected_draw_function, widget_t>;

        template <typename widget_t>
        constexpr static bool has_interact_function_v = is_detected_exact_v<void, detected_interact_function, widget_t>;

        template <typename widget_t>
        constexpr static bool has_resolve_function_v = is_detected_exact_v<void, detected_resolve_function, widget_t>;
    }

    using widget_id_data = std::uintptr_t;

    template <typename widget_t>
    using widget_ref_data = reference_type_t<widget_t>;

    struct widget_id_access {
        [[nodiscard]] static widget_id make_from_data(const std::uintptr_t& data);
        [[nodiscard]] static std::uintptr_t get_data(const widget_id& id);
    };

    template <typename widget_t>
    struct widget_ref_access {
        [[nodiscard]] static widget_ref<widget_t> make_from_data(const reference_type_t<widget_t>& data);
        [[nodiscard]] static reference_type_t<widget_t>& get_data(widget_ref<widget_t>& ref);
    };

    struct widget_update_data {
        std::uintptr_t raw = {};
        std::any inplace_data = {};
        std::optional<std::reference_wrapper<widget_update_data>> parent = std::nullopt;
        std::vector<std::reference_wrapper<widget_update_data>> children = {};
        resolve_command resolver_command = {};
        interact_command interactor_command = {};
        draw_command drawer_command = {};
		// remplacer par du context !!
        std::function<void(resolve_command&)> resolver = nullptr;
        std::function<void(interact_command&)> interactor = nullptr;
        std::function<void(draw_command&)> drawer = nullptr;
#if BUNGEEGUM_USE_HOTSWAP
        std::function<void(reloaded_loader&)> loader = nullptr;
        std::function<void(reloaded_saver&)> saver = nullptr;
        std::function<std::uintptr_t()> true_ptr = nullptr;
        std::function<std::size_t()> true_sizeof = nullptr;
#endif
#if BUNGEEGUM_USE_OVERLAY
        std::string clean_typename = {};
#endif
    };
	
    struct widget_manager_data {
        std::unordered_map<std::uintptr_t, widget_update_data> updatables = {};
        std::vector<std::reference_wrapper<widget_update_data>> resolvables = {};
        std::vector<std::reference_wrapper<widget_update_data>> interactables = {};
        std::vector<std::reference_wrapper<widget_update_data>> drawables = {};
    };
}
}
