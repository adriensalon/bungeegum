#pragma once

#include <bungeegum/core/animation.fwd>
#include <bungeegum/core/log.fwd>
#include <bungeegum/core/widget.fwd>
#include <bungeegum/core/shader.fwd>
#include <bungeegum/core/font.fwd>
#include <bungeegum/core/texture.fwd>

#include <unordered_map>
#include <optional>

namespace bungeegum {
namespace detail {

    struct swapped_manager_data {
        swapped_manager_data() = default;
        swapped_manager_data(const swapped_manager_data& other) = delete;
        swapped_manager_data& operator=(const swapped_manager_data& other) = delete;
        swapped_manager_data(swapped_manager_data&& other) = delete;
        swapped_manager_data& operator=(swapped_manager_data&& other) = delete;
        
        animations_manager_data animations = {};
        events_manager_data events = {};
        fonts_manager_data fonts = {};
        logs_manager_data logs = {};
        textures_manager_data textures = {};
        widget_manager_data widgets = {};

        std::uintptr_t current = 0u;
        std::unordered_map<std::uintptr_t, std::reference_wrapper<rasterizer_handle>> rasterizers = {};
        std::optional<std::reference_wrapper<shader_handle>> default_shader = std::nullopt;
        std::optional<std::reference_wrapper<shader_handle>> mask_shader = std::nullopt;
    };

    void setup_global_if_required(); // This has to be called before doing anything else (inside embed(), launch(), hotswap::xxx() etc)

#if BUNGEEGUM_USE_HOTSWAP
    inline swapped_manager_data& get_swapped_global() // This has to be inline for reload (?)
    {
        return get_global_data<swapped_manager_data>();
    }
#else
    swapped_manager_data& get_swapped_global();
#endif

}
}