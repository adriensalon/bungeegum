#pragma once

#include <filesystem>
#include <memory>
#include <string>
#include <unordered_set>

#include <bungeegum/glue/rendering.hpp>
#include <bungeegum/core/math.hpp>

namespace bungeegum {

struct texture;

namespace detail {

    struct texture_data {
        texture_data();
        texture_data(const texture_data& other);
        texture_data& operator=(const texture_data& other);
        texture_data(texture_data&& other);
        texture_data& operator=(texture_data&& other);
        ~texture_data();

        std::uintptr_t raw = 0u;
        std::unordered_map<std::uintptr_t, texture_handle> textures = {};
        bool is_compiled = false;
		std::filesystem::path creation_filename = {};
		std::vector<unsigned char> creation_pixels = {};
		uint2 creation_size = zero<uint2>;
    };

	struct textures_manager_data {
        textures_manager_data() = default;
        textures_manager_data(const textures_manager_data& other) = delete;
        textures_manager_data& operator=(const textures_manager_data& other) = delete;
        textures_manager_data(textures_manager_data&& other) = delete;
        textures_manager_data& operator=(textures_manager_data&& other) = delete;

        std::unordered_map<std::uintptr_t, std::reference_wrapper<texture_data>> textures = {};
	};
	
    struct texture_access {
        [[nodiscard]] static const texture_data& get_data(const texture& object);
    };

}
}