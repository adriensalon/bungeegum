#pragma once

#include <optional>
#include <unordered_map>

#include <bungeegum/config/backend.hpp>
#include <bungeegum/config/feature.hpp>
#include <bungeegum/config/misc.hpp>
#include <bungeegum/core/font.hpp>
#include <bungeegum/core/math.hpp>
#include <bungeegum/core/shader.hpp>
#include <bungeegum/core/texture.hpp>
#include <bungeegum/core/widget.hpp>
#include <bungeegum/glue/renderer.hpp>
#include <bungeegum/glue/time.hpp>
#include <bungeegum/glue/window.hpp>

#if TOOLCHAIN_PLATFORM_EMSCRIPTEN
#define BUNGEEGUM_USE_PREFERRED_PIPELINE_RENDERER bungeegum::renderer_backend::opengl
#elif BUNGEEGUM_USE_DIRECTX
#define BUNGEEGUM_USE_PREFERRED_PIPELINE_RENDERER bungeegum::renderer_backend::directx11
#elif BUNGEEGUM_USE_VULKAN
#define BUNGEEGUM_USE_PREFERRED_PIPELINE_RENDERER bungeegum::renderer_backend::vulkan
#elif BUNGEEGUM_USE_OPENGL
#define BUNGEEGUM_USE_PREFERRED_PIPELINE_RENDERER bungeegum::renderer_backend::opengl
#else
#error "No graphics backend available. Please define BUNGEEGUM_USE_DIRECTX, BUNGEEGUM_USE_VULKAN or BUNGEEGUM_USE_OPENGL."
#endif

namespace bungeegum {

struct pipeline;

namespace detail {

    using frames_chronometer = chronometer<BUNGEEGUM_USE_TIME_UNIT>;
    using frames_chronometer_task = chronometer_task<BUNGEEGUM_USE_TIME_UNIT>;

    struct pipeline_data {
        window pipeline_window = {};
        renderer pipeline_renderer = {};

		imgui_shader_handle user_shader = {};
		imgui_shader_handle user_mask = {};
#if BUNGEEGUM_USE_OVERLAY
		imgui_shader_handle overlay_shader = {};
#endif

        std::optional<std::reference_wrapper<widget_update_data>> root_updatable = std::nullopt;
        stopwatch profiling_stopwatch; // move to window for non emscripten update loop with fps


#if BUNGEEGUM_USE_OVERLAY
        std::string renderer_info = {};
        // etc
        BUNGEEGUM_USE_TIME_UNIT lifetime_duration = {};
        frames_chronometer steps_chronometer = {};
        frames_chronometer widgets_chronometer = {};
#endif
    };

    struct pipeline_manager_data {
		std::unordered_map<std::uintptr_t, std::reference_wrapper<pipeline_data>> pipelines = {};

#if BUNGEEGUM_USE_OVERLAY
        std::optional<std::reference_wrapper<pipeline_data>> current = std::nullopt;
        std::optional<std::uintptr_t> inspector_selected = std::nullopt;
#endif
    };

    struct pipeline_access {
        [[nodiscard]] static pipeline make_from_data(const pipeline_data& data);
        [[nodiscard]] static pipeline_data& get_data(pipeline& object);
    };

}
}