#pragma once

#include <filesystem>
#include <list>
#include <memory>
#include <string>

#include <bungeegum/core/overlay.fwd>
#include <bungeegum/glue/reload.hpp>
#include <bungeegum/glue/simd.hpp>
#include <bungeegum/glue/time.hpp>

#if BUNGEEGUM_USE_OVERLAY && !defined(BUNGEEGUM_USE_OVERLAY_PROFILER_FRAMES_COUNT)
#define BUNGEEGUM_USE_OVERLAY_PROFILER_FRAMES_COUNT 30u
#endif

#if BUNGEEGUM_USE_OVERLAY && !defined(BUNGEEGUM_USE_OVERLAY_PROFILER_UNIT)
#define BUNGEEGUM_USE_OVERLAY_PROFILER_UNIT std::chrono::milliseconds
#endif

namespace bungeegum {
namespace detail {

    using frames_chronometer = chronometer<BUNGEEGUM_USE_OVERLAY_PROFILER_FRAMES_COUNT, BUNGEEGUM_USE_OVERLAY_PROFILER_UNIT>;

    struct backend_manager {
        backend_manager() = default;
        backend_manager(const backend_manager& other) = delete;
        backend_manager& operator=(const backend_manager& other) = delete;
        backend_manager(backend_manager&& other) = delete;
        backend_manager& operator=(backend_manager&& other) = delete;

#if BUNGEEGUM_USE_HOTSWAP
        void setup_if_required();

        void save_widgets(const std::filesystem::path& archive_path);

        void load_widgets(const std::filesystem::path& archive_path);

        std::unique_ptr<reloader> reload_manager = nullptr;
        std::wstring reload_initialization_message = {}; // Degager ptetre direct submit dans standalone.cpp
#endif

#if BUNGEEGUM_USE_OVERLAY
        frames_chronometer profiler_chronometer = {};
#endif

        uint2 viewport_size = zero<float2>;
    };
}
}