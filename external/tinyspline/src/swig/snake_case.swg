/* -----------------------------------------------------------------------------
 * snake_case.swg
 *
 * Include this file to change casing to snake_case.
 * ----------------------------------------------------------------------------- */

%rename("%(undercase)s", %$isfunction) "";
%rename("%(undercase)s", %$ismember,
                         %$not %$isconstructor,
                         %$not %$isenumitem) "";

// In some cases, the snake_case version generated by SWIG is not suitable.
// In the following, these elements are fixed by hand.
%rename(control_point_vec2_at) tinyspline::BSpline::controlPointVec2At;
%rename(set_control_point_vec2_at) tinyspline::BSpline::setControlPointVec2At;

%rename(control_point_vec3_at) tinyspline::BSpline::controlPointVec3At;
%rename(set_control_point_vec3_at) tinyspline::BSpline::setControlPointVec3At;

%rename(control_point_vec4_at) tinyspline::BSpline::controlPointVec4At;
%rename(set_control_point_vec4_at) tinyspline::BSpline::setControlPointVec4At;

// Backward compatibility of published functions with improper casing.
%extend tinyspline::BSpline {

	tinyspline::Vec2
	tinyspline::BSpline::control_point_vec_2at(size_t idx) const
	{ return $self->controlPointVec2At(idx); }

	void
	tinyspline::BSpline::set_control_point_vec_2at(size_t idx, Vec2 &cp)
	{ $self->setControlPointVec2At(idx, cp); }

	tinyspline::Vec3
	tinyspline::BSpline::control_point_vec_3at(size_t idx) const
	{ return $self->controlPointVec3At(idx); }

	void
	tinyspline::BSpline::set_control_point_vec_3at(size_t idx, Vec3 &cp)
	{ $self->setControlPointVec3At(idx, cp); }

	tinyspline::Vec4
	tinyspline::BSpline::control_point_vec_4at(size_t idx) const
	{ return $self->controlPointVec4At(idx); }

	void
	tinyspline::BSpline::set_control_point_vec_4at(size_t idx, Vec4 &cp)
	{ $self->setControlPointVec4At(idx, cp); }

};
